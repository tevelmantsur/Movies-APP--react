{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97252\\\\Desktop\\\\New-App\\\\my-app\\\\src\\\\components\\\\Episodes.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Slider from 'react-slick';\nimport SingelEpisode from './SingelEpisode';\n\nfunction Episodes(props) {\n  const [e, sete] = useState([{\n    data: [],\n    next: []\n  }]);\n  const [ClickedMoreEpi, setClickedMoreEpi] = useState(false);\n  const [LoadingEpisode, setLoadingEpisode] = useState(false);\n  const EPISODE_API = `https://kitsu.io/api/edge/anime/${props.num}/episodes`;\n\n  const reade = API => {\n    fetch(API).then(res => res.json()).then(data => {\n      sete(prev => ({\n        data: data.data,\n        next: data.links.next\n      }));\n    });\n  };\n\n  useEffect(() => {\n    reade(EPISODE_API);\n  }, [props.num]);\n\n  function ClickMe(A) {\n    console.log(e);\n    setClickedMoreEpi(true);\n  }\n\n  useEffect(() => {\n    if (ClickedMoreEpi) {\n      if (!LoadingEpisode) {\n        fetch(e.next).then(res => res.json()).then(data => {\n          sete(prev => ({ ...prev,\n            data: [...prev.data, ...data.data],\n            next: data.links.next\n          }));\n        }).then(setLoadingEpisode(false));\n      } else return;\n    } else return setLoadingEpisode(false);\n  }, [ClickMe]);\n  return !e.data ? null : /*#__PURE__*/React.createElement(SingelEpisode, {\n    data: e,\n    onClick: e => {\n      return ClickMe(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 31\n    }\n  });\n}\n\nexport default Episodes;","map":{"version":3,"sources":["C:/Users/97252/Desktop/New-App/my-app/src/components/Episodes.jsx"],"names":["React","useState","useEffect","Slider","SingelEpisode","Episodes","props","e","sete","data","next","ClickedMoreEpi","setClickedMoreEpi","LoadingEpisode","setLoadingEpisode","EPISODE_API","num","reade","API","fetch","then","res","json","prev","links","ClickMe","A","console","log"],"mappings":";AACA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAIxB,QAAM,CAACC,CAAD,EAAKC,IAAL,IAAaP,QAAQ,CAAC,CAAC;AAACQ,IAAAA,IAAI,EAAC,EAAN;AAAUC,IAAAA,IAAI,EAAC;AAAf,GAAD,CAAD,CAA3B;AACA,QAAM,CAACC,cAAD,EAAkBC,iBAAlB,IAAwCX,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACY,cAAD,EAAkBC,iBAAlB,IAAwCb,QAAQ,CAAC,KAAD,CAAtD;AAGA,QAAMc,WAAW,GAAI,mCAAkCT,KAAK,CAACU,GAAI,WAAjE;;AAEA,QAAMC,KAAK,GAAIC,GAAD,IAAO;AACjBC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACOC,GAAD,IAAOA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOX,IAAD,IAAQ;AACND,MAAAA,IAAI,CAACe,IAAI,KAAI;AACTd,QAAAA,IAAI,EAAEA,IAAI,CAACA,IADF;AAETC,QAAAA,IAAI,EAAED,IAAI,CAACe,KAAL,CAAWd;AAFR,OAAJ,CAAL,CAAJ;AAIC,KAPT;AASH,GAVD;;AAYAR,EAAAA,SAAS,CAAC,MAAI;AACNe,IAAAA,KAAK,CAACF,WAAD,CAAL;AACH,GAFI,EAEH,CAACT,KAAK,CAACU,GAAP,CAFG,CAAT;;AAKI,WAASS,OAAT,CAAiBC,CAAjB,EAAmB;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYrB,CAAZ;AACDK,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACF;;AAGDV,EAAAA,SAAS,CAAC,MAAI;AACL,QAAGS,cAAH,EAAkB;AACd,UAAG,CAACE,cAAJ,EAAmB;AAChBM,QAAAA,KAAK,CAACZ,CAAC,CAACG,IAAH,CAAL,CACCU,IADD,CACOC,GAAD,IAAOA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOX,IAAD,IAAQ;AACVD,UAAAA,IAAI,CAAEe,IAAI,KAAK,EAAC,GAAGA,IAAJ;AAAUd,YAAAA,IAAI,EAAE,CAAC,GAAGc,IAAI,CAACd,IAAT,EAAe,GAAGA,IAAI,CAACA,IAAvB,CAAhB;AAA8CC,YAAAA,IAAI,EAAED,IAAI,CAACe,KAAL,CAAWd;AAA/D,WAAL,CAAN,CAAJ;AACH,SAJD,EAKHU,IALG,CAKEN,iBAAiB,CAAC,KAAD,CALnB;AAMF,OAPD,MAOM;AAET,KAVD,MAUM,OAAOA,iBAAiB,CAAC,KAAD,CAAxB;AAGd,GAdQ,EAcN,CAACW,OAAD,CAdM,CAAT;AAmBA,SAAQ,CAAClB,CAAC,CAACE,IAAH,GAAU,IAAV,gBAAkB,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAEF,CAArB;AAAwB,IAAA,OAAO,EAAGA,CAAD,IAAK;AAAC,aAAOkB,OAAO,CAAClB,CAAD,CAAd;AAAkB,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1B;AAGH;;AAGD,eAAeF,QAAf","sourcesContent":["\r\nimport React,{useState, useEffect} from 'react'\r\nimport Slider from 'react-slick'\r\nimport SingelEpisode from './SingelEpisode'\r\nfunction Episodes(props){\r\n\r\n\r\n\r\nconst [e , sete] = useState([{data:[], next:[]}])\r\nconst [ClickedMoreEpi , setClickedMoreEpi ] = useState(false)\r\nconst [LoadingEpisode , setLoadingEpisode ] = useState(false)\r\n\r\n\r\nconst EPISODE_API = `https://kitsu.io/api/edge/anime/${props.num}/episodes`\r\n\r\nconst reade = (API)=>{\r\n    fetch(API)\r\n    .then((res)=>res.json())\r\n    .then((data)=>{\r\n            sete(prev=> ({\r\n                data: data.data,\r\n                next: data.links.next ,\r\n                }))\r\n            }) \r\n\r\n}\r\n\r\nuseEffect(()=>{\r\n        reade(EPISODE_API)\r\n    },[props.num])\r\n    \r\n\r\n    function ClickMe(A){\r\n        console.log(e)\r\n       setClickedMoreEpi(true)\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n             if(ClickedMoreEpi){\r\n                 if(!LoadingEpisode){\r\n                    fetch(e.next)\r\n                    .then((res)=>res.json())\r\n                    .then((data)=>{\r\n                        sete((prev => ({...prev, data: [...prev.data ,...data.data], next: data.links.next}))) \r\n                    })  \r\n                .then(setLoadingEpisode(false))\r\n                 }else return\r\n               \r\n             }else return setLoadingEpisode(false)\r\n                \r\n      \r\n    }, [ClickMe])\r\n    \r\n\r\n\r\n\r\n    return( !e.data ? null :  <SingelEpisode data={e} onClick={(e)=>{return ClickMe(e)}}/>)\r\n   \r\n\r\n}\r\n\r\n\r\nexport default Episodes"]},"metadata":{},"sourceType":"module"}